こんにちは。[https://adventar.org/calendars/2660:title=編集者アドベントカレンダー]の1記事目です。初日ということでドキドキしますが、編集者ならではの言葉へのこだわり！ といった読み応えある記事は後のだれかがきっと書いてくれると期待して、ここでは「**GitHub Desktop**」という便利ツールの紹介をサクサクとやっっちゃいます。

[https://desktop.github.com/:favicon:title=GitHub Desktop | Simple collaboration from your desktop:bookmark]

GitHubというのは「ソフトウェア開発プロジェクトのための共有ウェブサービス」であって、バージョン管理システム「Git」の最もポピュラーなホスティングサイトだそうです<small>（ウィキペディアによる）</small>。あと「プルリクエスト」が便利だともよく聞きますね。

よく聞きますが、ここではGitのホスティングだとかプルリクエストっといったちょいと敷居が高い仕組みをとりあえず使わないで、単純にローカルで編集中の原稿のバージョンを管理してみます。

原稿のバージョン、つまり修正履歴をきちんと管理すると「この修正って、いつ誰の指示で入れたんだっけ？」という悩みが解消できたり、間違えて古いバックアップを編集しはじめてしまった！ などのミスが防げるなどの効能が期待できます<small>（効果には個人差があります）</small>。

### インストールとリポジトリ

上記の[https://desktop.github.com/:title=リンク]からアプリをダウンロードして、PCにインストールします。ページには「Electronで作り直したからクロスプラットフォームなんやで」と書いてあるっぽいので、たぶんWindowsでもMacでも同じように動作するでしょう。

インストールしたら、起動します。「GitHubのアカウントを持ってる？ なかったら作ってく？」と聞かれましたが、いったんスルーし、ローカルのアカウント情報だけを設定しました<small>（このあたりはWindowsでの動作確認です）</small>。

記事あるいは企画ごと、書籍ごとなどこれから書く原稿を管理するのに適当な単位で、**リポジトリ**を立てます。リポジトリの追加は［File］→［New Repository］ですが、初回だとメイン画面の［Create new repogitory］をクリックします。

リポジトリの名前<small>（フォルダ名になるので英語で空白を空けないのがよさそう）</small>や、ローカルディスク上のどこに置くかを設定します。デフォルトで、ホームディレクトリに［GitHub］といった専用フォルダが作られます。

> [f:id:mohri:20171201031456p:plain:alt=最初にリポジトリを作る:title=最初にリポジトリを作る]

イニシャライズしておくと、リポジトリ名のサブフォルダができ、README.mdファイルがひとつ置かれています。mdというのはMarkdon記法のことで、中身はただのテキストファイルです。

このサブフォルダに原稿を置いていきます。ひとまず「原稿.txt」ファイルを書きはじめます。ちなみにリポジトリをレポジトリというのはおっさんっぽい表記だそうです。

> [f:id:mohri:20171201031448p:plain:alt=リポジトリのフォルダにファイルを作成する:title=リポジトリのフォルダにファイルを作成する]

### 原稿を修正して差分を確認する

GitHub Desktopでは、左側のペインに［Changes］と［History］の2つのタブがあり、右側のペインには原稿の差分が表示されます。［Changes］タブで現在編集中の変更が確認でき、［History］はその通り過去ログなので、以前にどこで修正してこうなったのかが確認できます。基本的には［Changes］を選択しておきます。

原稿を編集するにつれて［Changes］の差分もあわせて変化していきます。これが実に便利なところで、原稿をふつうにエディタで加筆修正した結果が、リアルタムで確認できるのです。しかも、置換などである単語だけ変更したというときには、その単語だけが強調表示されていてわかりやすい。

> [f:id:mohri:20171201031440p:plain:alt=修正した差分がわかりやすい:title=修正した差分がわかりやすい]

### 変更をコミットする

ひと通り書いたところで、変更をコミットします。左下の「Summary」欄に、ひとつ前にコミットしたあとでどういった編集をしたか、例えば「著者校を反映」だとか「表記統一」だとか書いて「Commit to master」ボタンを押します。これで、ファイルの修正がリポジトリに履歴として記憶されます。

>  [f:id:mohri:20171201031436p:plain:alt=コミットする:title=コミットする]

原稿をコミットするごとに［History］タブで履歴が増えていきます。校正・推敲するときには、あるまとまった単位を作業をするごとにコミットすると、あとでゴチャゴチャにならなくてよさそうです。

こうやって原稿が完成するまで適切な粒度でコミットしていけば、あとで見たときに適度に編集の様子がわかって便利です。「古い原稿.bak-20171130.txt」みたいな名前のファイルをフォルダいっぱいに残しておく必要はもうありません。

### GitHub Desktopの良いところ

GitHubには、Gitが持っているバージョン管理ツールとしての良さと、プルリクエストによってコラボレーションがスムーズに行えることという2つの利点があります。そして、使い方のドキュメントもネットにたくさん上がっています。

しかし、そういったドキュメントはコードレビューとコマンドラインツールに慣れたエンジニア向けに書かれているものが多く、そもそも文系の職種である編集者にとっては

* コマンドラインなツールは敷居が高い。オプションを覚えるのがたいへん
* プルリクエストが便利とよく聞くけど、仕組みがよくわからないし、使いこなせるか不安
* 自分だけじゃなくて著者やほかの関係者みんなを巻き込んでいくのがたいへん

といったことが敷居になって、なかなか使いはじめられないのではないかと思います。というか自分がまさにそういうかんじでしたが、このGitHub Desktopを知って、1番目の障壁がなくなってことが気分的にもかなり楽になりました。

また、実際に使ってみて、もちろん著者などからの校正を受け取るためにプルリクエストを処理したりもするのですが、それより差分の見やすさ、原稿の修正点の確認しやすさに感動しました。

こうやってスタンドアローンの編集履歴確認ツールとして使ってみてから、GitHubのアカウントを取り、ローカルのリポジトリをパブリッシュし、プルリクエストを受け取ったり、ブランチを切ったりするとよいのでは？ と考えたのでした。

ということで、この原稿自体のリポジトリを下記に公開しています。もし誤字など発見されたときには、プルリクエストを送っていたけると嬉しいです。

### 編集者アドベントカレンダーについて

思い立って急に[http://mohritaroh.hateblo.jp/entry/2017/11/30/123836:title=アナウンス]した編集者アドベントカレンダーですが、1日でほぼ執筆者が埋まりました。編集者だけでなく、ライター、メディア営業、校正校閲などいろいろな方に参加いただいて、ほんとに感謝しかありません。ありがとうございます。これからクリスマスまで、毎日が楽しみです！

[https://adventar.org/calendars/2660:embed]
